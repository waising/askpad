package com.asking.pad.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.asking.pad.app.entity.book.BookTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "sync_lesson".
*/
public class BookTableDao extends AbstractDao<BookTable, String> {

    public static final String TABLENAME = "sync_lesson";

    /**
     * Properties of entity BookTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PathId = new Property(0, String.class, "pathId", true, "k");
        public final static Property Value = new Property(1, String.class, "value", false, "v");
    }


    public BookTableDao(DaoConfig config) {
        super(config);
    }
    
    public BookTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"sync_lesson\" (" + //
                "\"k\" TEXT PRIMARY KEY NOT NULL ," + // 0: pathId
                "\"v\" TEXT);"); // 1: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"sync_lesson\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookTable entity) {
        stmt.clearBindings();
 
        String pathId = entity.getPathId();
        if (pathId != null) {
            stmt.bindString(1, pathId);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookTable entity) {
        stmt.clearBindings();
 
        String pathId = entity.getPathId();
        if (pathId != null) {
            stmt.bindString(1, pathId);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookTable readEntity(Cursor cursor, int offset) {
        BookTable entity = new BookTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // pathId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookTable entity, int offset) {
        entity.setPathId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookTable entity, long rowId) {
        return entity.getPathId();
    }
    
    @Override
    public String getKey(BookTable entity) {
        if(entity != null) {
            return entity.getPathId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookTable entity) {
        return entity.getPathId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
