package com.asking.pad.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.asking.pad.app.entity.classmedia.StudyRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDY_RECORD".
*/
public class StudyRecordDao extends AbstractDao<StudyRecord, String> {

    public static final String TABLENAME = "STUDY_RECORD";

    /**
     * Properties of entity StudyRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CourseDataId = new Property(0, String.class, "courseDataId", true, "COURSE_DATA_ID");
        public final static Property PlayProgress = new Property(1, int.class, "playProgress", false, "PLAY_PROGRESS");
        public final static Property PlayMax = new Property(2, int.class, "playMax", false, "PLAY_MAX");
        public final static Property PlayPercentage = new Property(3, int.class, "playPercentage", false, "PLAY_PERCENTAGE");
    }


    public StudyRecordDao(DaoConfig config) {
        super(config);
    }
    
    public StudyRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDY_RECORD\" (" + //
                "\"COURSE_DATA_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: courseDataId
                "\"PLAY_PROGRESS\" INTEGER NOT NULL ," + // 1: playProgress
                "\"PLAY_MAX\" INTEGER NOT NULL ," + // 2: playMax
                "\"PLAY_PERCENTAGE\" INTEGER NOT NULL );"); // 3: playPercentage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDY_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudyRecord entity) {
        stmt.clearBindings();
 
        String courseDataId = entity.getCourseDataId();
        if (courseDataId != null) {
            stmt.bindString(1, courseDataId);
        }
        stmt.bindLong(2, entity.getPlayProgress());
        stmt.bindLong(3, entity.getPlayMax());
        stmt.bindLong(4, entity.getPlayPercentage());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudyRecord entity) {
        stmt.clearBindings();
 
        String courseDataId = entity.getCourseDataId();
        if (courseDataId != null) {
            stmt.bindString(1, courseDataId);
        }
        stmt.bindLong(2, entity.getPlayProgress());
        stmt.bindLong(3, entity.getPlayMax());
        stmt.bindLong(4, entity.getPlayPercentage());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public StudyRecord readEntity(Cursor cursor, int offset) {
        StudyRecord entity = new StudyRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // courseDataId
            cursor.getInt(offset + 1), // playProgress
            cursor.getInt(offset + 2), // playMax
            cursor.getInt(offset + 3) // playPercentage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudyRecord entity, int offset) {
        entity.setCourseDataId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPlayProgress(cursor.getInt(offset + 1));
        entity.setPlayMax(cursor.getInt(offset + 2));
        entity.setPlayPercentage(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StudyRecord entity, long rowId) {
        return entity.getCourseDataId();
    }
    
    @Override
    public String getKey(StudyRecord entity) {
        if(entity != null) {
            return entity.getCourseDataId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudyRecord entity) {
        return entity.getCourseDataId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
