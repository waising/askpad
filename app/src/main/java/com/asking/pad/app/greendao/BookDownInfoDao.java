package com.asking.pad.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.asking.pad.app.entity.book.BookDownInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_DOWN_INFO".
*/
public class BookDownInfoDao extends AbstractDao<BookDownInfo, String> {

    public static final String TABLENAME = "BOOK_DOWN_INFO";

    /**
     * Properties of entity BookDownInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommodityId = new Property(0, String.class, "commodityId", true, "COMMODITY_ID");
        public final static Property DownloadUrl = new Property(1, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property CourseName = new Property(2, String.class, "courseName", false, "COURSE_NAME");
        public final static Property CommodityName = new Property(3, String.class, "commodityName", false, "COMMODITY_NAME");
        public final static Property CourseTypeId = new Property(4, String.class, "courseTypeId", false, "COURSE_TYPE_ID");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
        public final static Property DownState = new Property(7, byte.class, "downState", false, "DOWN_STATE");
        public final static Property CountLength = new Property(8, long.class, "countLength", false, "COUNT_LENGTH");
        public final static Property ReadLength = new Property(9, long.class, "readLength", false, "READ_LENGTH");
    }


    public BookDownInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookDownInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_DOWN_INFO\" (" + //
                "\"COMMODITY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: commodityId
                "\"DOWNLOAD_URL\" TEXT," + // 1: downloadUrl
                "\"COURSE_NAME\" TEXT," + // 2: courseName
                "\"COMMODITY_NAME\" TEXT," + // 3: commodityName
                "\"COURSE_TYPE_ID\" TEXT," + // 4: courseTypeId
                "\"VERSION\" TEXT," + // 5: version
                "\"USER_ID\" TEXT," + // 6: userId
                "\"DOWN_STATE\" INTEGER NOT NULL ," + // 7: downState
                "\"COUNT_LENGTH\" INTEGER NOT NULL ," + // 8: countLength
                "\"READ_LENGTH\" INTEGER NOT NULL );"); // 9: readLength
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_DOWN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookDownInfo entity) {
        stmt.clearBindings();
 
        String commodityId = entity.getCommodityId();
        if (commodityId != null) {
            stmt.bindString(1, commodityId);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(3, courseName);
        }
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(4, commodityName);
        }
 
        String courseTypeId = entity.getCourseTypeId();
        if (courseTypeId != null) {
            stmt.bindString(5, courseTypeId);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getDownState());
        stmt.bindLong(9, entity.getCountLength());
        stmt.bindLong(10, entity.getReadLength());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookDownInfo entity) {
        stmt.clearBindings();
 
        String commodityId = entity.getCommodityId();
        if (commodityId != null) {
            stmt.bindString(1, commodityId);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(3, courseName);
        }
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(4, commodityName);
        }
 
        String courseTypeId = entity.getCourseTypeId();
        if (courseTypeId != null) {
            stmt.bindString(5, courseTypeId);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getDownState());
        stmt.bindLong(9, entity.getCountLength());
        stmt.bindLong(10, entity.getReadLength());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookDownInfo readEntity(Cursor cursor, int offset) {
        BookDownInfo entity = new BookDownInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // commodityId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downloadUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // courseName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commodityName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // courseTypeId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // version
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userId
            (byte) cursor.getShort(offset + 7), // downState
            cursor.getLong(offset + 8), // countLength
            cursor.getLong(offset + 9) // readLength
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookDownInfo entity, int offset) {
        entity.setCommodityId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDownloadUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCourseName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommodityName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCourseTypeId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDownState((byte) cursor.getShort(offset + 7));
        entity.setCountLength(cursor.getLong(offset + 8));
        entity.setReadLength(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookDownInfo entity, long rowId) {
        return entity.getCommodityId();
    }
    
    @Override
    public String getKey(BookDownInfo entity) {
        if(entity != null) {
            return entity.getCommodityId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookDownInfo entity) {
        return entity.getCommodityId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
