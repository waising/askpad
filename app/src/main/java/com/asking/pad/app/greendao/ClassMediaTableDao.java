package com.asking.pad.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.asking.pad.app.entity.classmedia.ClassMediaTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLASS_MEDIA_TABLE".
*/
public class ClassMediaTableDao extends AbstractDao<ClassMediaTable, String> {

    public static final String TABLENAME = "CLASS_MEDIA_TABLE";

    /**
     * Properties of entity ClassMediaTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CourseDataId = new Property(0, String.class, "courseDataId", true, "COURSE_DATA_ID");
        public final static Property CourseName = new Property(1, String.class, "courseName", false, "COURSE_NAME");
        public final static Property VideoUrl = new Property(2, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property PdfUrl = new Property(3, String.class, "pdfUrl", false, "PDF_URL");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property DownState = new Property(5, byte.class, "downState", false, "DOWN_STATE");
        public final static Property CountLength = new Property(6, long.class, "countLength", false, "COUNT_LENGTH");
        public final static Property ReadLength = new Property(7, long.class, "readLength", false, "READ_LENGTH");
    }


    public ClassMediaTableDao(DaoConfig config) {
        super(config);
    }
    
    public ClassMediaTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLASS_MEDIA_TABLE\" (" + //
                "\"COURSE_DATA_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: courseDataId
                "\"COURSE_NAME\" TEXT," + // 1: courseName
                "\"VIDEO_URL\" TEXT," + // 2: videoUrl
                "\"PDF_URL\" TEXT," + // 3: pdfUrl
                "\"USER_ID\" TEXT," + // 4: userId
                "\"DOWN_STATE\" INTEGER NOT NULL ," + // 5: downState
                "\"COUNT_LENGTH\" INTEGER NOT NULL ," + // 6: countLength
                "\"READ_LENGTH\" INTEGER NOT NULL );"); // 7: readLength
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLASS_MEDIA_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClassMediaTable entity) {
        stmt.clearBindings();
 
        String courseDataId = entity.getCourseDataId();
        if (courseDataId != null) {
            stmt.bindString(1, courseDataId);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(2, courseName);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(3, videoUrl);
        }
 
        String pdfUrl = entity.getPdfUrl();
        if (pdfUrl != null) {
            stmt.bindString(4, pdfUrl);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
        stmt.bindLong(6, entity.getDownState());
        stmt.bindLong(7, entity.getCountLength());
        stmt.bindLong(8, entity.getReadLength());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClassMediaTable entity) {
        stmt.clearBindings();
 
        String courseDataId = entity.getCourseDataId();
        if (courseDataId != null) {
            stmt.bindString(1, courseDataId);
        }
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(2, courseName);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(3, videoUrl);
        }
 
        String pdfUrl = entity.getPdfUrl();
        if (pdfUrl != null) {
            stmt.bindString(4, pdfUrl);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
        stmt.bindLong(6, entity.getDownState());
        stmt.bindLong(7, entity.getCountLength());
        stmt.bindLong(8, entity.getReadLength());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ClassMediaTable readEntity(Cursor cursor, int offset) {
        ClassMediaTable entity = new ClassMediaTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // courseDataId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pdfUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            (byte) cursor.getShort(offset + 5), // downState
            cursor.getLong(offset + 6), // countLength
            cursor.getLong(offset + 7) // readLength
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClassMediaTable entity, int offset) {
        entity.setCourseDataId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCourseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideoUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPdfUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownState((byte) cursor.getShort(offset + 5));
        entity.setCountLength(cursor.getLong(offset + 6));
        entity.setReadLength(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ClassMediaTable entity, long rowId) {
        return entity.getCourseDataId();
    }
    
    @Override
    public String getKey(ClassMediaTable entity) {
        if(entity != null) {
            return entity.getCourseDataId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClassMediaTable entity) {
        return entity.getCourseDataId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
